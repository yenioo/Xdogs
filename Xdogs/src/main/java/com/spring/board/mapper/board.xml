<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="board">

	<!-- 게시판 목록 -->
	<select id="boardList" resultType="com.spring.board.model.BoardVO">
	    with 
		A as 
		(select bno, fk_userid, bsubject, to_char(updateday, 'yyyy.mm.dd hh24:mi') AS updateday, status
		from tbl_board
		),
		B as
		(select substr(userid,1,instr(userid,'@')-1) AS fk_userid, userid
		from 
		(select userid
		from tbl_member) v)
		select A.bno, B.fk_userid, A.bsubject, A.updateday, A.status
		FROM A JOIN B
		ON A.fk_userid = B.userid
		where status = 1
		order by bno desc
	</select>

	<!-- 게시판 삭제 -->
	<delete id="goBoardDel" parameterType="HashMap">
		delete from tbl_board
		where bno in
		<foreach collection="bnoArr" index="i" open="(" separator="," close=")">
			'${bnoArr[i]}'
		</foreach>
	</delete>

	<!-- 게시판 추가 처리하기 -->
	<insert id="boardAddEnd" parameterType="com.spring.board.model.BoardVO">
		insert into tbl_board(bno, fk_userid, bsubject, updateday, status) 
		values(seq_tbl_board.nextval, #{fk_userid}, #{bsubject}, default, default)
	</insert>

	<!-- 조회하고자 하는 게시판 번호 받아오기 -->
	<select id="getBoardName" parameterType="string" resultType="String">
		select bsubject
		from tbl_board
		where bno = #{bno}
	</select>

	<!-- 하나의 게시판 목록 -->
	<select id="postList" parameterType="string" resultType="com.spring.board.model.PostVO">
	    with 
		A as 
		(select pno, fk_bno, fk_userid, psummary, psubject, pcontent, to_char(writeday, 'yyyy.mm.dd hh24:mi') AS writeday,
		       to_char(updateday, 'yyyy.mm.dd hh24:mi') AS updateday, status, commentcount
		from tbl_post
		),
		B as
		(select substr(userid,1,instr(userid,'@')-1) AS fk_userid, userid
		from 
		(select userid
		from tbl_member) v)
		select A.pno, A.fk_bno, B.fk_userid, A.psummary, A.psubject, A.pcontent, A.writeday, A.updateday, A.status, A.commentcount
		FROM A JOIN B
		ON A.fk_userid = B.userid
		where status = 1 and fk_bno = #{bno}
		order by pno desc
	</select>

	<!-- 게시판 추가 처리하기 -->
	<insert id="postAddEnd" parameterType="com.spring.board.model.PostVO">
		insert into tbl_post(pno, fk_bno, fk_userid, psummary, psubject, pcontent, writeday, updateday, status, commentcount) 
		values(seq_tbl_post.nextval, #{fk_bno}, #{fk_userid}, #{psummary}, #{psubject}, #{pcontent}, default, default, default , default)
	</insert>

	<!-- 게시물 1개 조회하기 -->
	<select id="postView" parameterType="string" resultType="com.spring.board.model.PostVO">
		select pno, fk_bno, fk_userid, psummary, psubject, pcontent, writeday, updateday, status, commentcount
		from tbl_post
		where pno = #{pno}
	</select>

	<!-- 게시물 1개 삭제하기 -->
	<delete id="postDelEnd" parameterType="string">
		delete from tbl_post
		where pno = #{pno}
	</delete>

	<!-- 게시물 수정 처리하기 -->
	<update id="postEditEnd" parameterType="com.spring.board.model.PostVO">
		update tbl_post set psubject = #{psubject},
		                    psummary = #{psummary},
		                    pcontent = #{pcontent}
		where pno = #{pno}
	</update>
	
	<!-- 댓글 조회하기 -->
	<select id="getCommentListPaging" parameterType="HashMap" resultType="com.spring.board.model.CommentVO">
		with 
		A as 
		(
		select cno, fk_pno, fk_userid, content, writeday, status
		from
		(
		    select row_number() over(order by cno desc) AS rno, status, cno,
		           fk_pno, fk_userid, content, to_char(writeday, 'yyyy.mm.dd') AS writeday
		    from tbl_comment
		) V
		where rno between #{startRno} and #{endRno}
		),
		B as
		(select substr(userid,1,instr(userid,'@')-1) AS fk_userid, userid
		from 
		(select userid
		from tbl_member) v)
		select A.cno, A.fk_pno, B.fk_userid, A.content, A.writeday, A.status
		FROM A JOIN B
		ON A.fk_userid = B.userid
		where status = 1 and fk_pno = #{fk_pno}
		order by cno desc
	</select>

	<!-- 하나의 게시물당 댓글의 totalPage 수 알아오기 -->
	<select id="commentTotalPage" parameterType="HashMap" resultType="int">
		select ceil(count(*)/#{sizePerPage})
		from tbl_comment
		where status = 1 and fk_pno = #{fk_pno}
	</select>

	<!-- 댓글쓰기(Ajax 처리) -->
	<insert id="addComment" parameterType="com.spring.board.model.CommentVO">
		insert into tbl_comment(cno, fk_pno, fk_userid, content, writeday, status) 
		values(seq_tbl_comment.nextval, #{fk_pno}, #{fk_userid}, #{content}, default, default)
	</insert>

	<!-- 본인 댓글 삭제하기(Ajax 처리) -->
	<delete id="commentDel" parameterType="String">
		delete from tbl_comment
		where cno = #{cno}
	</delete>











</mapper>

